lua_shared_dict upstream 10m ;

server {
    listen 8080;
    keepalive_timeout 0 ;
    server_tokens off ;

    ## REDIS SETTINGS
    set $redis_host '127.0.0.1' ;
    set $redis_port 6379 ;
    set $redis_idle 10000 ;
    set $redis_pool_size 100 ;
    set $redis_timeout 500 ;

    # RATE LIMIT HEADER CONFIGURATION
    set_real_ip_from            127.0.0.1;
    set_real_ip_from            10.0.0.0/8;
    set_real_ip_from            172.16.0.0/12;
    set_real_ip_from            192.168.0.0/16;
    real_ip_header              X-Forwarded-For;
    real_ip_recursive           on;

    ## PER VHOST+REMOTE_ADDR RATE LIMIT CONFIGURATION
    access_by_lua '
        local request = require "resty.rate.limit"
        request.limit {
            key = ngx.var.host .. ":" .. ngx.var.remote_addr ,
            rate = 1024 ,
            interval = 1 ,
            log_level = ngx.NOTICE ,
            redis_conf = { host = redis_host, port = redis_port, timeout = redis_timeout, pool_size = redis_pool_size }
        }
    ' ;

    ## DEFAULT ACCESS CONTEXT
    location / {
        set $upstream '' ;
        access_by_lua_file lua/v1/upstream.lua ;
        echo "upstream: ${upstream}" ;
        #log_by_lua_file lua/v1/log_upstream.lua ;
    }

    ### API LOCATION CONTEXT
    location /v1/add {
        default_type 'application/json' ;
        content_by_lua_file lua/v1/add.lua ;
    }

    location /v1/rem {
        default_type 'application/json' ;
        content_by_lua_file lua/v1/rem.lua ;
    }

    location /v1/list {
        default_type 'application/json' ;
        content_by_lua_file lua/v1/list.lua ;    
    }


    location /favicon.ico {
        access_log off ;
        return 200 ;
    }

    location /nginx_status {
        stub_status on;
    }

    location /v1/flushall {
        content_by_lua '
            local dict = ngx.shared.upstream
            dict:flush_all()
            ngx.say(1)
            ngx.exit(200)
        ';
    }
}
